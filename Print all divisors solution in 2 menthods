Method 1:

class Solution{
    static long divi(int n,int m,int c){
        if(m==0){
            return c;
        }
        if(n%m==0){
            c=c+m;
        }
        return divi(n,m-1,c);
    }
    static long sumOfDivisors(int N){
        long sum=0;
        while(N!=0){
            long f=divi(N,N,0);
            sum=sum+f;
            N--;
        }
        return sum;
    }
}

Method 2: Optimized code
// Think about how many times a number can be a 
divisor.Then, for any non-negative integer n, if d is a divisor of n then n/d is also a divisor of n.
4/1 >> 4*1>>4

4/2 >> 2*2 >>4+4>> 8

4/3 >> 1*3 >> 3+8>>11

4/4 >> 1*4 >> 4+11 >> 15 //

class Solution{
    static long sumOfDivisors(int N){
      long sum=0;
      for(int i=1;i<=N;i++){
        sum+=(N/i)*i;
      }
      return sum;
    }
}
